#Web-based Functionality

web | Given /^I wait for (\d+) seconds$/
    | at `FeatureContext::iWaitForSeconds()`

web | Given /^I set browser window size to "([^"]*)" x "([^"]*)"$/
    | at `FeatureContext::iSetBrowserWindowSizeToX()`

web | When /^I hover over the element "([^"]*)"$/
    | at `FeatureContext::iHoverOverTheElement()`

web | When /^I confirm the popup$/
    | at `FeatureContext::confirmPopup()`

web | When /^(?:|I )cancel the popup$/
    | at `FeatureContext::cancelPopup()`

web | When /^I should see "([^"]*)" in popup$/
    | at `FeatureContext::assertPopupMessage()`

web | When /^(?:|I )fill "([^"]*)" in popup$/
    | at `FeatureContext::setPopupText()`

web | Given /^I click on the element with xpath "([^"]*)"$/
    | at `FeatureContext::iClickOnTheElementWithXpath2()`

web | When /^I click on the element with xpath \'([^\']*)\'$/
    | at `FeatureContext::iClickOnTheElementWithXPath()`

web | Given /^I click "([^"]*)"/
    | at `FeatureContext::iClick()`

web | Given /^I scroll to the bottom$/
    | at `FeatureContext::iScrollToBottom()`

web | Given /^I scroll to the top$/
    | at `FeatureContext::iScrollToTop()`

web | Given /^I scroll to the "([^"]*)" (field|link|button)$/
    | Scroll to a certain element by label.
    | Requires an "id" attribute to uniquely identify the element in the document.
    | Example: Given I scroll to the "Submit" button
    | Example: Given I scroll to the "My Date" field
    | at `FeatureContext::iScrollToField()`

web | Given /^I am on a new session$/
    | at `FeatureContext::iAmOnANewSession()`

web | When /^I click ad coordinates$/
    | at `FeatureContext::iClickAdCoordinates()`

web | Given /^(?:|I )am on (?:|the )homepage$/
    | Opens homepage.
    | at `FeatureContext::iAmOnHomepage()`

web | When /^(?:|I )go to (?:|the )homepage$/
    | Opens homepage.
    | at `FeatureContext::iAmOnHomepage()`

web | Given /^(?:|I )am on "(?P<page>[^"]+)"$/
    | Opens specified page.
    | at `FeatureContext::visit()`

web | When /^(?:|I )go to "(?P<page>[^"]+)"$/
    | Opens specified page.
    | at `FeatureContext::visit()`

web | When /^(?:|I )reload the page$/
    | Reloads current page.
    | at `FeatureContext::reload()`

web | When /^(?:|I )move backward one page$/
    | Moves backward one page in history.
    | at `FeatureContext::back()`

web | When /^(?:|I )move forward one page$/
    | Moves forward one page in history
    | at `FeatureContext::forward()`

web | When /^(?:|I )press "(?P<button>(?:[^"]|\\")*)"$/
    | Presses button with specified id|name|title|alt|value.
    | at `FeatureContext::pressButton()`

web | When /^(?:|I )follow "(?P<link>(?:[^"]|\\")*)"$/
    | Clicks link with specified id|title|alt|text.
    | at `FeatureContext::clickLink()`

web | When /^(?:|I )fill in "(?P<field>(?:[^"]|\\")*)" with "(?P<value>(?:[^"]|\\")*)"$/
    | Fills in form field with specified id|name|label|value.
    | at `FeatureContext::fillField()`

web | When /^(?:|I )fill in "(?P<field>(?:[^"]|\\")*)" with:$/
    | Fills in form field with specified id|name|label|value.
    | at `FeatureContext::fillField()`

web | When /^(?:|I )fill in "(?P<value>(?:[^"]|\\")*)" for "(?P<field>(?:[^"]|\\")*)"$/
    | Fills in form field with specified id|name|label|value.
    | at `FeatureContext::fillField()`

web | When /^(?:|I )fill in the following:$/
    | Fills in form fields with provided table.
    | at `FeatureContext::fillFields()`

web | When /^(?:|I )select "(?P<option>(?:[^"]|\\")*)" from "(?P<select>(?:[^"]|\\")*)"$/
    | Selects option in select field with specified id|name|label|value.
    | at `FeatureContext::selectOption()`

web | When /^(?:|I )additionally select "(?P<option>(?:[^"]|\\")*)" from "(?P<select>(?:[^"]|\\")*)"$/
    | Selects additional option in select field with specified id|name|label|value.
    | at `FeatureContext::additionallySelectOption()`

web | When /^(?:|I )check "(?P<option>(?:[^"]|\\")*)"$/
    | Checks checkbox with specified id|name|label|value.
    | at `FeatureContext::checkOption()`

web | When /^(?:|I )uncheck "(?P<option>(?:[^"]|\\")*)"$/
    | Unchecks checkbox with specified id|name|label|value.
    | at `FeatureContext::uncheckOption()`

web | When /^(?:|I )attach the file "(?P<path>[^"]*)" to "(?P<field>(?:[^"]|\\")*)"$/
    | Attaches file to field with specified id|name|label|value.
    | at `FeatureContext::attachFileToField()`

web | Then /^(?:|I )should be on "(?P<page>[^"]+)"$/
    | Checks, that current page PATH is equal to specified.
    | at `FeatureContext::assertPageAddress()`

web | Then /^(?:|I )should be on (?:|the )homepage$/
    | Checks, that current page is the homepage.
    | at `FeatureContext::assertHomepage()`

web | Then /^the (?i)url(?-i) should match (?P<pattern>"(?:[^"]|\\")*")$/
    | Checks, that current page PATH matches regular expression.
    | at `FeatureContext::assertUrlRegExp()`

web | Then /^the response status code should be (?P<code>\d+)$/
    | Checks, that current page response status is equal to specified.
    | at `FeatureContext::assertResponseStatus()`

web | Then /^the response status code should not be (?P<code>\d+)$/
    | Checks, that current page response status is not equal to specified.
    | at `FeatureContext::assertResponseStatusIsNot()`

web | Then /^(?:|I )should see "(?P<text>(?:[^"]|\\")*)"$/
    | Checks, that page contains specified text.
    | at `FeatureContext::assertPageContainsText()`

web | Then /^(?:|I )should not see "(?P<text>(?:[^"]|\\")*)"$/
    | Checks, that page doesn't contain specified text.
    | at `FeatureContext::assertPageNotContainsText()`

web | Then /^(?:|I )should see text matching (?P<pattern>"(?:[^"]|\\")*")$/
    | Checks, that page contains text matching specified pattern.
    | at `FeatureContext::assertPageMatchesText()`

web | Then /^(?:|I )should not see text matching (?P<pattern>"(?:[^"]|\\")*")$/
    | Checks, that page doesn't contain text matching specified pattern.
    | at `FeatureContext::assertPageNotMatchesText()`

web | Then /^the response should contain "(?P<text>(?:[^"]|\\")*)"$/
    | Checks, that HTML response contains specified string.
    | at `FeatureContext::assertResponseContains()`

web | Then /^the response should not contain "(?P<text>(?:[^"]|\\")*)"$/
    | Checks, that HTML response doesn't contain specified string.
    | at `FeatureContext::assertResponseNotContains()`

web | Then /^(?:|I )should see "(?P<text>(?:[^"]|\\")*)" in the "(?P<element>[^"]*)" element$/
    | Checks, that element with specified CSS contains specified text.
    | at `FeatureContext::assertElementContainsText()`

web | Then /^(?:|I )should not see "(?P<text>(?:[^"]|\\")*)" in the "(?P<element>[^"]*)" element$/
    | Checks, that element with specified CSS doesn't contain specified text.
    | at `FeatureContext::assertElementNotContainsText()`

web | Then /^the "(?P<element>[^"]*)" element should contain "(?P<value>(?:[^"]|\\")*)"$/
    | Checks, that element with specified CSS contains specified HTML.
    | at `FeatureContext::assertElementContains()`

web | Then /^the "(?P<element>[^"]*)" element should not contain "(?P<value>(?:[^"]|\\")*)"$/
    | Checks, that element with specified CSS doesn't contain specified HTML.
    | at `FeatureContext::assertElementNotContains()`

web | Then /^(?:|I )should see an? "(?P<element>[^"]*)" element$/
    | Checks, that element with specified CSS exists on page.
    | at `FeatureContext::assertElementOnPage()`

web | Then /^(?:|I )should not see an? "(?P<element>[^"]*)" element$/
    | Checks, that element with specified CSS doesn't exist on page.
    | at `FeatureContext::assertElementNotOnPage()`

web | Then /^the "(?P<field>(?:[^"]|\\")*)" field should contain "(?P<value>(?:[^"]|\\")*)"$/
    | Checks, that form field with specified id|name|label|value has specified value.
    | at `FeatureContext::assertFieldContains()`

web | Then /^the "(?P<field>(?:[^"]|\\")*)" field should not contain "(?P<value>(?:[^"]|\\")*)"$/
    | Checks, that form field with specified id|name|label|value doesn't have specified value.
    | at `FeatureContext::assertFieldNotContains()`

web | Then /^the "(?P<checkbox>(?:[^"]|\\")*)" checkbox should be checked$/
    | Checks, that checkbox with specified in|name|label|value is checked.
    | at `FeatureContext::assertCheckboxChecked()`

web | Then /^the checkbox "(?P<checkbox>(?:[^"]|\\")*)" (?:is|should be) checked$/
    | Checks, that checkbox with specified in|name|label|value is checked.
    | at `FeatureContext::assertCheckboxChecked()`

web | Then /^the "(?P<checkbox>(?:[^"]|\\")*)" checkbox should not be checked$/
    | Checks, that checkbox with specified in|name|label|value is unchecked.
    | at `FeatureContext::assertCheckboxNotChecked()`

web | Then /^the checkbox "(?P<checkbox>(?:[^"]|\\")*)" should (?:be unchecked|not be checked)$/
    | Checks, that checkbox with specified in|name|label|value is unchecked.
    | at `FeatureContext::assertCheckboxNotChecked()`

web | Then /^the checkbox "(?P<checkbox>(?:[^"]|\\")*)" is (?:unchecked|not checked)$/
    | Checks, that checkbox with specified in|name|label|value is unchecked.
    | at `FeatureContext::assertCheckboxNotChecked()`

web | Then /^(?:|I )should see (?P<num>\d+) "(?P<element>[^"]*)" elements?$/
    | Checks, that (?P<num>\d+) CSS elements exist on the page
    | at `FeatureContext::assertNumElements()`

web | Then /^print current URL$/
    | Prints current URL to console.
    | at `FeatureContext::printCurrentUrl()`

web | Then /^print last response$/
    | Prints last response to console.
    | at `FeatureContext::printLastResponse()`

web | Then /^show last response$/
    | Opens last response content in browser.
    | at `FeatureContext::showLastResponse()`

#API Functionality

api | Given /^I authenticated as "(\S+)"$/
    | Calls specified command
    | at `Behat\GuzzleExtension\Context\GuzzleContext::iAuthenticateAs()`

api | When /^I authenticate as "(\S+)"$/
    | Calls specified command
    | at `Behat\GuzzleExtension\Context\GuzzleContext::iAuthenticateAs()`

api | Given /^I called "(\S+)"$/
    | Calls specified command
    | at `Behat\GuzzleExtension\Context\GuzzleContext::iCallCommand()`

api | When /^I call "(\S+)"$/
    | Calls specified command
    | at `Behat\GuzzleExtension\Context\GuzzleContext::iCallCommand()`

api | Given /^I called "(\S+)" with the following body text:$/
    | Calls specified command with text
    | at `Behat\GuzzleExtension\Context\GuzzleContext::iCallCommandWithBodyText()`

api | When /^I call "(\S+)" with the following body text:$/
    | Calls specified command with text
    | at `Behat\GuzzleExtension\Context\GuzzleContext::iCallCommandWithBodyText()`

api | Given /^I called "(\S+)" with the following value(s?):$/
    | Calls specified command with fields
    | at `Behat\GuzzleExtension\Context\GuzzleContext::iCallCommandWithValue()`

api | When /^I call "(\S+)" with the following value(s?):$/
    | Calls specified command with fields
    | at `Behat\GuzzleExtension\Context\GuzzleContext::iCallCommandWithValue()`

api | Given /^I called "(\S+)" with the following value(s?) from JSON:$/
    | Calls specified command with fields
    | at `Behat\GuzzleExtension\Context\GuzzleContext::iCallCommandWithValueFromJSON()`

api | When /^I call "(\S+)" with the following value(s?) from JSON:$/
    | Calls specified command with fields
    | at `Behat\GuzzleExtension\Context\GuzzleContext::iCallCommandWithValueFromJSON()`

api | Then I get a response with a status code of :code
    | at `Behat\GuzzleExtension\Context\GuzzleContext::iGetAResponseWithAStatusCodeOf()`

api | Then I get a successful response
    | at `Behat\GuzzleExtension\Context\GuzzleContext::iGetASuccessfulResponse()`

api | Then I get an unsuccessful response with a status code of :code
    | at `Behat\GuzzleExtension\Context\GuzzleContext::iGetAnUnsuccessfulResponseWithAStatusCodeOf()`

api | Then the response contains the following value(s):
    | at `Behat\GuzzleExtension\Context\GuzzleContext::theResponseContainsTheFollowingValue()`

api | Then the response contains :count resource(s) with the following data:
    | at `Behat\GuzzleExtension\Context\GuzzleContext::theResponseContainsResourceWithTheFollowingData()`

api | Then /^the response is stored as "(\S+)"$/
    | at `Behat\GuzzleExtension\Context\GuzzleContext::theResponseIsStored()`

api | Given /^I am authenticating as "([^"]*)" with "([^"]*)" password$/
    | Adds Basic Authentication header to next request.
    | at `APIContext::iAmAuthenticatingAs()`

api | Given /^I set header "([^"]*)" with value "([^"]*)"$/
    | Sets a HTTP Header.
    | at `APIContext::iSetHeaderWithValue()`

api | When /^(?:I )?send a ([A-Z]+) request to "([^"]+)"$/
    | Sends HTTP request to specific relative URL.
    | at `APIContext::iSendARequest()`

api | When /^(?:I )?send a ([A-Z]+) request to "([^"]+)" with values:$/
    | Sends HTTP request to specific URL with field values from Table.
    | at `APIContext::iSendARequestWithValues()`

api | When /^(?:I )?send a ([A-Z]+) request to "([^"]+)" with body:$/
    | Sends HTTP request to specific URL with raw body from PyString.
    | at `APIContext::iSendARequestWithBody()`

api | When /^(?:I )?send a ([A-Z]+) request to "([^"]+)" with form data:$/
    | Sends HTTP request to specific URL with form data from PyString.
    | at `APIContext::iSendARequestWithFormData()`

api | Then /^(?:the )?response code should be (\d+)$/
    | Checks that response has specific status code.
    | at `APIContext::theResponseCodeShouldBe()`

api | Then /^(?:the )?response should contain "([^"]*)"$/
    | Checks that response body contains specific text.
    | at `APIContext::theResponseShouldContain()`

api | Then /^(?:the )?response should not contain "([^"]*)"$/
    | Checks that response body doesn't contains specific text.
    | at `APIContext::theResponseShouldNotContain()`

api | Then /^(?:the )?response should contain json:$/
    | Checks that response body contains JSON from PyString.
    | at `APIContext::theResponseShouldContainJson()`

api | Then print response
    | Prints last response body.
    | at `APIContext::printResponse()`
